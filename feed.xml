<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://aabbccdkg.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://aabbccdkg.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-11T14:51:32+00:00</updated><id>https://aabbccdkg.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Mock Interview, LeetCode</title><link href="https://aabbccdkg.github.io/blog/2025/Mock-Interview(1)/" rel="alternate" type="text/html" title="Mock Interview, LeetCode"/><published>2025-06-10T18:32:13+00:00</published><updated>2025-06-10T18:32:13+00:00</updated><id>https://aabbccdkg.github.io/blog/2025/Mock-Interview(1)</id><content type="html" xml:base="https://aabbccdkg.github.io/blog/2025/Mock-Interview(1)/"><![CDATA[<p>A tree with <code class="language-plaintext highlighter-rouge">n</code> nodes must have exactly <code class="language-plaintext highlighter-rouge">n - 1</code> edges</p> <ul> <li>More than <code class="language-plaintext highlighter-rouge">n - 1</code>: cycle</li> <li>Less than <code class="language-plaintext highlighter-rouge">n - 1</code>: not all nodes are connected: isolated nodes or a forest (multiple disconnected subtrees)</li> </ul>]]></content><author><name></name></author><category term="LeetCode"/><category term="LeetCode"/><summary type="html"><![CDATA[LeetCode problems discussed during a mock interview on 2025-06-10]]></summary></entry><entry><title type="html">Meta, LeetCode</title><link href="https://aabbccdkg.github.io/blog/2025/Meta/" rel="alternate" type="text/html" title="Meta, LeetCode"/><published>2025-06-10T16:32:13+00:00</published><updated>2025-06-10T16:32:13+00:00</updated><id>https://aabbccdkg.github.io/blog/2025/Meta</id><content type="html" xml:base="https://aabbccdkg.github.io/blog/2025/Meta/"><![CDATA[<p><a href="https://leetcode.com/problems/buildings-with-an-ocean-view/description/?envType=company&amp;envId=facebook&amp;favoriteSlug=facebook-thirty-days">1762. Buildings With an Ocean View</a></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Wrong
</span><span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span> <span class="c1"># .sort() returns None
</span>
<span class="c1"># Correct: sort() is O(nlogn)
</span><span class="n">result</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>
<span class="k">return</span> <span class="n">result</span>

<span class="c1"># Better: remove sort(), use [::-1] to reverse list, O(n)
</span><span class="k">return</span> <span class="n">result</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findBuildings</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">heights</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">max_heights</span> <span class="o">=</span> <span class="n">heights</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">heights</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">heights</span><span class="p">)</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">heights</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">max_heights</span><span class="p">:</span>
                <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">max_heights</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">max_heights</span><span class="p">,</span> <span class="n">heights</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode"/><category term="LeetCode"/><summary type="html"><![CDATA[LeetCode problems frequently asked by Meta]]></summary></entry><entry><title type="html">Linked List, LeetCode</title><link href="https://aabbccdkg.github.io/blog/2025/LinkedList/" rel="alternate" type="text/html" title="Linked List, LeetCode"/><published>2025-06-10T15:32:13+00:00</published><updated>2025-06-10T15:32:13+00:00</updated><id>https://aabbccdkg.github.io/blog/2025/LinkedList</id><content type="html" xml:base="https://aabbccdkg.github.io/blog/2025/LinkedList/"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list
</span><span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="c1"># '=' assigns value
</span>        <span class="c1"># ':' type annotation
</span>        <span class="c1"># val: int = 0
</span>        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for doubly-linked list
</span><span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>
        <span class="n">self</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">prev</span>
</code></pre></div></div> <p>Since ListNode may be <code class="language-plaintext highlighter-rouge">None</code>, so the type annotation should be Optional[ListNode]</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Optional</span>
<span class="k">def</span> <span class="nf">method</span><span class="p">(</span><span class="n">head</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]):</span>
</code></pre></div></div> <p>Check <code class="language-plaintext highlighter-rouge">curr.next</code> for deletion of Linked List, so use <code class="language-plaintext highlighter-rouge">while curr.next</code> instead of <code class="language-plaintext highlighter-rouge">while curr</code></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Optional</span>
<span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeElements</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
        <span class="n">dummy_head</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">dummy_head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">head</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">dummy_head</span>
        <span class="k">while</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span> 
            <span class="k">if</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">val</span><span class="p">:</span>
                <span class="n">curr</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span>
                <span class="c1"># curr.next is updated, check it 
</span>                <span class="c1"># again without moving curr forward 
</span>                <span class="c1"># otherwise, might skip consecutive target nodes.
</span>            <span class="k">else</span><span class="p">:</span>
                <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">return</span> <span class="n">dummy_head</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode"/><category term="LeetCode"/><summary type="html"><![CDATA[LeetCode problems related to Linked List]]></summary></entry><entry><title type="html">Array, LeetCode</title><link href="https://aabbccdkg.github.io/blog/2025/Array/" rel="alternate" type="text/html" title="Array, LeetCode"/><published>2025-06-10T00:32:13+00:00</published><updated>2025-06-10T00:32:13+00:00</updated><id>https://aabbccdkg.github.io/blog/2025/Array</id><content type="html" xml:base="https://aabbccdkg.github.io/blog/2025/Array/"><![CDATA[<p><a href="https://leetcode.com/problems/binary-search/description/">704. Binary Search</a></p> <p>To calculate the middle index: use <code class="language-plaintext highlighter-rouge">(left + right) // 2</code>, where <code class="language-plaintext highlighter-rouge">//</code> denotes floor division. When the number of elements is even, the fomular returns the left-middle index.</p> <p>Optimization: <code class="language-plaintext highlighter-rouge">left + (right - left) // 2</code> - Avoid integer overflow caused by a too large <code class="language-plaintext highlighter-rouge">right + left</code> through interval offset</p> <p>Why O(log(n))?</p> <ul> <li>Each iteration eliminates half of elements</li> <li>Search Space shrinks exponentially <ul> <li>1st iteration: n elements</li> <li>2st iteration: n/2 elements</li> </ul> </li> <li>At most log(n) comparisons are needed <ul> <li>2^k = n, log(n) = k</li> </ul> </li> <li>Stop in advance (<code class="language-plaintext highlighter-rouge">nums[middle] == target</code>) before checking all search space (<code class="language-plaintext highlighter-rouge">left == right</code>)</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">right</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
            <span class="n">middle</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
            <span class="k">if</span> <span class="n">target</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">middle</span><span class="p">]:</span> 
                <span class="c1"># target is smaller, search the left half and update the right boundary
</span>                <span class="n">right</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">target</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">middle</span><span class="p">]:</span> 
                <span class="c1"># target is bigger, search the right half and update the left boundary
</span>                <span class="n">left</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">middle</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div> <p><a href="https://leetcode.com/problems/remove-element/description/">27. Remove Element</a></p> <p>Run test cases:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">a</span><span class="p">)):</span>
    <span class="k">assert</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="c1"># assertion error
</span></code></pre></div></div> <p>The algorithm aims to remove elements. Using <code class="language-plaintext highlighter-rouge">nums[j] == val</code> finds elements to delete, but deletion is essentially “doing nothing”. The elements that actually need operations are those where <code class="language-plaintext highlighter-rouge">nums[j] != val</code> (preserve and move postions)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeElement</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">slow</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">fast</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">fast</span><span class="p">]</span> <span class="o">!=</span> <span class="n">val</span><span class="p">:</span> <span class="c1"># we need to do some operations 
</span>                <span class="n">nums</span><span class="p">[</span><span class="n">slow</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">fast</span><span class="p">]</span>
                <span class="n">slow</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">slow</span>
</code></pre></div></div> <p><a href="https://leetcode.com/problems/squares-of-a-sorted-array/description/">977. Squares of a Sorted Array</a></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># left, right pointers:
</span><span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">right</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
<span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
    <span class="c1"># dynamic boundaries
</span>    <span class="c1"># last iteration: left == right (can terminate early)
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># slow, fast pointers:
</span><span class="n">slow</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">fast</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
    <span class="c1"># complete traversal (counldn't terminate early)
</span></code></pre></div></div> <p>In-place: algorithms that do not use additional data structures to stroe data during execution, but instead modify the original input data structure directly.</p> <p>Space Complexity:</p> <ul> <li>In-place: O(1)</li> <li>Not in-place: O(n), additional array</li> </ul> <p>Why not in-place in this question?</p> <ul> <li>Position changes are very complex (lacking a fixed direction or fixed pattern). Cross movements are difficult to accomplish with simple (two) pointer opertaions</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">sortedSquares</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">right</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">position</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
            <span class="n">left_square</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">**</span> <span class="mi">2</span>
            <span class="n">right_square</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">**</span> <span class="mi">2</span>
            <span class="k">if</span> <span class="n">left_square</span> <span class="o">&lt;=</span> <span class="n">right_square</span><span class="p">:</span> <span class="c1"># write '&lt;' first, then check whether '=' works 
</span>                <span class="n">result</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">right_square</span>
                <span class="n">position</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">right</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">reslut</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">left_square</span>
                <span class="n">position</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">result</span>
</code></pre></div></div> <p><a href="https://leetcode.com/problems/minimum-size-subarray-sum/description/">209. Minimum Size Subarray Sum</a></p> <p>In a loop (e.g., <code class="language-plaintext highlighter-rouge">while</code>, <code class="language-plaintext highlighter-rouge">for</code>):</p> <ul> <li>record the current valid result first</li> <li>update the state <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">sum_of_subarray</span> <span class="o">&gt;=</span> <span class="n">target</span><span class="p">:</span>
 <span class="n">min_length</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">min_length</span><span class="p">,</span> <span class="n">fast</span> <span class="o">-</span> <span class="n">slow</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> 
 <span class="c1"># record min_length
</span> <span class="n">sum_of_subarray</span> <span class="o">-=</span> <span class="n">nums</span><span class="p">[</span><span class="n">slow</span><span class="p">]</span> 
 <span class="c1"># update the sum_of_subarray
</span> <span class="c1"># record nums[slow] based on slow first
</span> <span class="n">slow</span> <span class="o">+=</span> <span class="mi">1</span> 
 <span class="c1"># update slow
</span> <span class="c1"># use it, and then update it
</span></code></pre></div> </div> </li> </ul> <p><code class="language-plaintext highlighter-rouge">right - left</code> actually calculates the length of the interval <code class="language-plaintext highlighter-rouge">[left, right)</code></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">minSubArrayLen</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">min_length</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">inf</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">sub_of_subarray</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">slow</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">fast</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="n">sub_of_subarray</span> <span class="o">+=</span> <span class="n">nums</span><span class="p">[</span><span class="n">fast</span><span class="p">]</span>

            <span class="k">while</span> <span class="n">sub_of_subarray</span> <span class="o">&gt;=</span> <span class="n">target</span><span class="p">:</span>
                <span class="n">min_length</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">min_length</span><span class="p">,</span> <span class="n">fast</span> <span class="o">-</span> <span class="n">slow</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">sum_of_array</span> <span class="o">-=</span> <span class="n">nums</span><span class="p">[</span><span class="n">slow</span><span class="p">]</span>
                <span class="n">slow</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">min_length</span> <span class="k">if</span> <span class="n">min_length</span> <span class="o">!=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">inf</span><span class="sh">'</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
</code></pre></div></div> <p><a href="https://leetcode.com/problems/spiral-matrix-ii/">59. Spiral Matrix II</a></p> <p><code class="language-plaintext highlighter-rouge">for _ in range(n)</code>: iterates n times</p> <p><code class="language-plaintext highlighter-rouge">for _ in range(left, right)</code>: iterates <code class="language-plaintext highlighter-rouge">right - left</code> times -&gt; <code class="language-plaintext highlighter-rouge">[left, right)</code></p> <p><code class="language-plaintext highlighter-rouge">for _ in range(left, right, -1)</code>: iterates <code class="language-plaintext highlighter-rouge">abs(right - left)</code> times -&gt; <code class="language-plaintext highlighter-rouge">(right, left]</code></p> <p><code class="language-plaintext highlighter-rouge">n * n</code> <code class="language-plaintext highlighter-rouge">matrix</code>: every row, every column has n elements</p> <p><code class="language-plaintext highlighter-rouge">[0] * n</code>: has n elements in total</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">generateMatrix</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]:</span>
        <span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
        <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">right</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="n">top</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">bottom</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span> <span class="ow">and</span> <span class="n">top</span> <span class="o">&lt;=</span> <span class="n">bottom</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">matrix</span><span class="p">[</span><span class="n">top</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">top</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c1"># update the boundary when all elemenets in a certain row/column is handled
</span>            <span class="k">if</span> <span class="n">top</span> <span class="o">&gt;</span> <span class="n">bottom</span><span class="p">:</span>
                <span class="k">break</span>
                
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">top</span><span class="p">,</span> <span class="n">bottom</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">right</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">right</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">left</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">matrix</span><span class="p">[</span><span class="n">bottom</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">bottom</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">top</span> <span class="o">&gt;</span> <span class="n">bottom</span><span class="p">:</span>
                <span class="k">break</span>
                
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">bottom</span><span class="p">,</span> <span class="n">top</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">left</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span><span class="p">:</span>
                <span class="k">break</span>
        <span class="k">return</span> <span class="n">matrix</span>
</code></pre></div></div> <p><a href="https://leetcode.com/problems/count-of-range-sum/description/">327. Count of Range Sum</a></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">"""</span><span class="s">
prefix_sum
nums = [1, 2, 3]
prefix_sum = [0, 1, 3, 6]
prefix_sum[i] = nums[0] + ... nums[i - 1]
prefix_sum[j + 1] = nums[0] + ... nums[i - 1] + nums[i] + ... + nums[j]
prefix_sum[j + 1] - prefix_sum[i] = nums[i] + ... nums[j]
</span><span class="sh">"""</span>
<span class="n">prefix_sum</span> <span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
    <span class="n">prefix_sum</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix_sum</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">num</span><span class="p">)</span>
<span class="c1"># sum of interval [i, j] could be represented as prefix_sum[j + 1] - prefix_sum[i]
</span></code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode"/><category term="LeetCode"/><summary type="html"><![CDATA[LeetCode problems related to Array]]></summary></entry><entry><title type="html">Top Research Labs in Machine Learning Systems (MLSys) 🔬</title><link href="https://aabbccdkg.github.io/blog/2024/mlsys-labs-intro/" rel="alternate" type="text/html" title="Top Research Labs in Machine Learning Systems (MLSys) 🔬"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://aabbccdkg.github.io/blog/2024/mlsys-labs-intro</id><content type="html" xml:base="https://aabbccdkg.github.io/blog/2024/mlsys-labs-intro/"><![CDATA[<p>This is a brief introduction to top-tier MLSys labs for Ph.D. applicants, with a primary focus on those in the United States and mainland China. If there are any omissions, please feel free to <a href="mailto:wangdong0502@gmail.com">contact me</a> to add them.</p> <h1 id="-united-states">🇺🇸 United States</h1> <h2 id="google-brain"><a href="https://research.google/">Google Brain</a></h2> <h2 id="microsoft-research-msr"><a href="https://www.microsoft.com/en-us/research/">Microsoft Research (MSR)</a></h2> <ul> <li><a href="https://www.microsoft.com/en-us/research/project/fiddle/">Fast and Efficient Infrastructure for Distributed Deep Learning (Fiddle)</a></li> </ul> <h2 id="catalyst-carnegie-mellon-university"><a href="https://catalyst.cs.cmu.edu/">Catalyst (Carnegie Mellon University)</a></h2> <ul> <li> <p><a href="https://www.cs.cmu.edu/~epxing/">Eric Xing: </a> Prof. Eric was a student of <a href="https://people.eecs.berkeley.edu/~jordan/">Prof. Michael I. Jordan</a>.</p> </li> <li> <p><a href="https://tqchen.com/">Tianqi Chen: </a></p> <ul> <li> <p><a href="https://tvm.apache.org/">TVM: </a> TVM is an open-source framework for optimizing and deploying deep learning models, with its name derived from “Tensor Virtual Machine.” Its primary goal is to optimize and compile deep learning models in an automated manner, enabling efficient execution on various hardware platforms such as CPUs, GPUs, FPGAs, and specialized AI accelerators.</p> </li> <li> <p><a href="https://xgboost.readthedocs.io/en/stable/">XGBoost: </a>XGBoost is an optimized distributed gradient boosting library designed to be highly efficient, flexible and portable. It implements machine learning algorithms under the Gradient Boosting framework. XGBoost provides a parallel tree boosting (also known as GBDT, GBM) that solve many data science problems in a fast and accurate way. The same code runs on major distributed environment (Hadoop, SGE, MPI) and can solve problems beyond billions of examples.</p> </li> <li> <p><a href="https://github.com/apache/mxnet">MXNet: </a>Apache MXNet is a deep learning framework designed for both efficiency and flexibility. It allows you to mix symbolic and imperative programming to maximize efficiency and productivity. At its core, MXNet contains a dynamic dependency scheduler that automatically parallelizes both symbolic and imperative operations on the fly. A graph optimization layer on top of that makes symbolic execution fast and memory efficient. MXNet is portable and lightweight, scalable to many GPUs and machines.</p> </li> </ul> </li> <li> <p><a href="https://www.cs.cmu.edu/~zhihaoj2/">Zhihao Jia: </a> Prof. Zhihao Jia is a student of <a href="https://people.eecs.berkeley.edu/~matei/">Prof. Matei Zaharia (now at UC Berkeley)</a>. He seems to be more focused on system for LLM.</p> <ul> <li><a href="chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https://cs.stanford.edu/~padon/taso-sosp19.pdf">TASO: </a></li> <li><a href="https://flexflow.ai/">Flexflow: </a></li> </ul> </li> </ul> <h2 id="dsail-mit"><a href="https://dsail.csail.mit.edu/">DSAIL (MIT)</a></h2> <ul> <li> <p><a href="https://hanlab.mit.edu/songhan">Song Han: </a>Pruning and Sparse related work. Prof. Song Han seems to be working on algorithm modifications and hardware, and he’s not really focused on TinyML anymore. Now he’s working on diffusion models and LLM models.</p> </li> <li> <p><a href="https://people.csail.mit.edu/kraska/">Tim Kraska: </a></p> </li> </ul> <h2 id="csail-mit"><a href="https://www.csail.mit.edu/">CSAIL (MIT)</a></h2> <ul> <li> <p><a href="https://people.csail.mit.edu/kraska/">Tim Kraska: </a> Learned Index</p> </li> <li> <p><a href="https://www.csail.mit.edu/person/saman-amarasinghe">Saman Amarasinghe: </a></p> <ul> <li><a href="chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https://people.csail.mit.edu/jrk/halide-pldi13.pdf">Halide</a></li> <li><a href="https://tacos.libraries.mit.edu/">TACO</a></li> </ul> </li> </ul> <h2 id="dawn-project-stanford"><a href="https://dawn.cs.stanford.edu/">DAWN Project (Stanford)</a></h2> <ul> <li><a href="https://people.eecs.berkeley.edu/~matei/">Matei Zaharia (now at UC Berkeley): </a> Prof. Matei Zaharia (Stanford &amp; Databricks) is highly respected for building <a href="https://spark.apache.org/">Apache Spark</a> (one of the most widely used frameworks for distributed data processing, and co-started other datacenter software such as Apache Mesos and Spark Streaming) from scratch to a billion-dollar level. He serves as a PC and chair for major conferences. PipeDream, TASO, and FlexFlow is the project built by his Ph.D. student Zhihao Jia. One standout aspect of his research is that it addresses real system needs, making it impactful and practical. Not all his work prioritizes performance; for instance, one recent paper discusses offloading computation to GPUs using annotation for ease of use. Overall, pursuing a PhD under his guidance would likely lead to significant influence in the industry.</li> </ul> <h2 id="hazy-research-stanford-ai-lab"><a href="https://hazyresearch.stanford.edu/index">Hazy Research (Stanford AI Lab)</a></h2> <p>This research group focuses on MLSys and also organized a seminar series called <a href="https://mlsys.stanford.edu/">Stanford MLSys Seminar Series</a>.</p> <h2 id="riselab-university-of-california-berkeley"><a href="https://rise.cs.berkeley.edu/">RISELab (University of California, Berkeley)</a></h2> <ul> <li> <p><a href="https://people.eecs.berkeley.edu/~istoica/">Ion Stoica: </a></p> </li> <li> <p><a href="https://people.eecs.berkeley.edu/~jordan/">Michael Jordan: </a></p> </li> </ul> <p>Most recent project: <a href="https://rise.cs.berkeley.edu/projects/ray/">Ray</a></p> <p>Professors at RISE Lab have offered a course called <a href="https://ucbrise.github.io/cs294-ai-sys-fa19/">AI for Systems and Systems for AI (CS294)</a>.</p> <h2 id="system-lab-university-of-washington"><a href="https://www.cs.washington.edu/research/systems">System Lab (University of Washington)</a></h2> <ul> <li><a href="https://homes.cs.washington.edu/~luisceze/">Luis Ceze: </a> Prof. Luis Ceze focuses on Programming Language and Computer Architecture. <ul> <li><a href="https://tvm.apache.org/">TVM: </a> TVM is an open-source framework for optimizing and deploying deep learning models, with its name derived from “Tensor Virtual Machine.” Its primary goal is to optimize and compile deep learning models in an automated manner, enabling efficient execution on various hardware platforms such as CPUs, GPUs, FPGAs, and specialized AI accelerators.</li> </ul> </li> <li><a href="https://www.cs.washington.edu/people/faculty/arvind">Arvind Krishnamurthy: </a> Prof. Arvind Krishnamurthy primarily focuses on computer networks. His work involves applying networking technology to address challenges in distributed machine learning. So there is always cutting-edge support in the field of networking.</li> </ul> <h2 id="sample-university-of-washington"><a href="https://sampl.cs.washington.edu/">Sample (University of Washington)</a></h2> <h2 id="symbioticlab-university-of-michigan-ann-arbor"><a href="https://symbioticlab.org/">SymbioticLab (University of Michigan, Ann Arbor)</a></h2> <ul> <li><a href="https://www.mosharaf.com/">Mosharaf Chowdhury (the academic leader): </a> Prof. Mosharaf is a student of <a href="https://people.eecs.berkeley.edu/~istoica/">Prof. Ion Stoica</a>. He offers the course <a href="https://github.com/mosharaf/eecs598/tree/w21-ai">Systems for AI (EECS598)</a>.</li> </ul> <h2 id="system-group-new-york-university"><a href="http://www.news.cs.nyu.edu/">System Group (New York University)</a></h2> <ul> <li><a href="https://cims.nyu.edu/people/profiles/LI_Jinyang.html">Jinyang Li: </a> She is the Ph.D. advisor of <a href="https://jermainewang.github.io/">Dr. Minjie Wang</a>(the author of DGL).</li> </ul> <h2 id="shivaram-venkataraman-research-group-university-of-wisconsin-madison"><a href="https://shivaram.org/">Shivaram Venkataraman Research Group (University of Wisconsin, Madison)</a></h2> <ul> <li><a href="https://shivaram.org/">Shivaram Venkataraman: </a> Prof. Shivaram is the student of <a href="https://people.eecs.berkeley.edu/~istoica/">Prof. Ion Stoica</a>. He understands more about machine learning and less about systems. The papers he published is not too many, but the workload is substantial.</li> </ul> <h2 id="ecosystem-university-of-toronto"><a href="https://www.cs.toronto.edu/ecosystem/">EcoSystem (University of Toronto)</a></h2> <ul> <li><a href="https://www.cs.toronto.edu/~pekhimenko/">Gennady Pekhimenko: </a></li> </ul> <h1 id="-china">🇨🇳 China</h1> <p>In mainland China, it seems that most of the work in MLSys is being done in companies. However, some strong teams in distributed systems often also work on MLSys to some extent, such as <a href="https://ipads.se.sjtu.edu.cn/zh/index.html">IPADS (Shanghai Jiaotong Univeristy)</a>.</p> <h2 id="microsoft-research-labasia"><a href="https://www.microsoft.com/en-us/research/group/systems-and-networking-research-group-asia/">Microsoft Research Lab(Asia)</a></h2> <h2 id="pacman-grouptsinghua"><a href="https://pacman.cs.tsinghua.edu.cn/">PACMAN Group(Tsinghua)</a></h2> <p>More related to Arch</p> <h2 id="center-for-energy-efficient-computing-and-applicationspeking-university"><a href="https://ceca.pku.edu.cn/people/index.htm">Center for Energy-efficient Computing and Applications(Peking University)</a></h2> <p>More related to Arch</p> <h2 id="cheng-lis-research-group-univeristy-of-science-and-technology-china"><a href="http://staff.ustc.edu.cn/~chengli7">Cheng LI’s Research Group (Univeristy of Science and Technology China)</a></h2> <h2 id="ipadsshanghai-jiaotong-univeristy"><a href="https://ipads.se.sjtu.edu.cn/zh/index.html">IPADS(Shanghai Jiaotong Univeristy)</a></h2> <p>The best System Lab in Mainland China, and now is also working on some MLSys projects.</p> <h1 id="-appendix">🌟 Appendix</h1> <h2 id="some-people-worth-following-on-zhihu">Some people worth following on Zhihu</h2> <ul> <li> <p><a href="https://www.zhihu.com/people/crowowrk">Tianqi Chen: </a> Dr. Tianqi Chen is currently an Assistant Professor at Carnegie Mellon University. He helps run the <a href="https://catalyst.cs.cmu.edu/">Catalyst Group</a>.</p> </li> <li> <p><a href="https://www.zhihu.com/people/zhanghuaizheng">Huaizheng Zhang: </a> Dr. Huaizheng Zhang’s <a href="https://github.com/HuaizhengZhang/AI-System-School">AI-System-School</a> is an open project aimed at collecting and organizing research papers, tools, and resources related to MLSys, Large Language Models (LLM), and Generative AI (GenAI). It provides researchers and engineers with a systematic learning path and practical guide to help them better understand and apply these cutting-edge technologies. Here is his <a href="https://huaizheng.xyz/">personal website</a>.</p> </li> <li> <p><a href="https://www.zhihu.com/people/breaknever">Yue Zhao: </a> Dr. Yue Zhang is currently an Assistant Professor at the University of Southern California. He was also a student of Prof. Zhihao Jia. Here is his <a href="https://github.com/yzhao062">personal website</a>.</p> </li> </ul>]]></content><author><name></name></author><category term="MLSys-Learning-Journal"/><category term="MLSys-Learning-Journal"/><summary type="html"><![CDATA[A brief introduction to top-tier MLSys labs for Ph.D. applicants.]]></summary></entry></feed>